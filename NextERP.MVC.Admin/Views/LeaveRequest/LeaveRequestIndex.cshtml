@using NextERP.ModelBase
@using NextERP.Util
@model NextERP.ModelBase.LeaveRequestModel
@inject LazZiya.ExpressLocalization.ISharedCultureLocalizer Localizer

@{
	ViewData["Title"] = TableName.LeaveRequest;
	Layout = "~/Views/Shared/_Layout.cshtml";
	ViewBag.Breadcrumbs = new List<(string Title, string Url, bool IsActive)>
{
		(TableName.LeaveRequest + "List", "", true),
	};
}

<div class="main-container">
	<div id="success-msg" class="position-fixed top-0 end-0 p-3 m-2 d-none" role="alert" aria-live="assertive" aria-atomic="true"></div>
	<input type="hidden" id="current-page-index" value="1" />

	<!--& FILTER -->
	<section class="filter-panel card">
		<form method="post">
			<div class="filter-actions">
				<button type="button" class="btn btn-success" id="create-button" data-bs-toggle="modal" data-bs-target="#create-edit-modal">
					<i class="fa-solid fa-pen"></i> <span localize-content>@Constants.ButtonEdit</span>
				</button>
				<button type="button" class="btn btn-warning disabled" id="edit-button" data-bs-toggle="modal" data-bs-target="#create-edit-modal">
					<i class="fa-solid fa-pen"></i> <span localize-content>@Constants.ButtonEdit</span>
				</button>
				<input type="text" name="Ids" id="Ids" hidden />
				<button type="button" class="btn btn-danger disabled" id="delete-button">
					<i class="fa-solid fa-trash"></i> <span localize-content>@Constants.ButtonDelete</span>
				</button>
				<button type="button" class="btn btn-danger disabled" id="delete-permanently-button">
					<i class="fa-solid fa-trash"></i> <span localize-content>@Constants.ButtonDeletePermanently</span>
				</button>
				<button type="button" class="btn btn-secondary" id="import-button" data-bs-toggle="modal" data-bs-target="#import-modal">
					<i class="fa-solid fa-file-import"></i> <span localize-content>@Constants.ButtonImport</span>
				</button>
				<button type="button" class="btn btn-secondary" id="export-button" data-bs-toggle="modal" data-bs-target="#export-modal">
					<i class="fa-solid fa-file-export"></i> <span localize-content>@Constants.ButtonExport</span>
				</button>
				<button type="button" class="btn btn-outline-secondary" data-bs-toggle="collapse" data-bs-target="#filter-inputs" aria-expanded="true" aria-controls="filter-inputs">
					<i class="fa-solid fa-filter"></i>
				</button>
				<a href="#" id="refresh-list"><i class="fa-solid fa-rotate"></i></a>
				<div class="d-flex align-items-center ms-2 pb-2">
					<input class="form-check-input" type="checkbox" value="" id="is-delete">
					<label class="form-check-label fs-5" for="is-delete" localize-content>IsDelete</label>
				</div>
			</div>
		</form>

		<div class="collapse" id="filter-inputs">
			<form id="@TableName.LeaveRequest-search-form" class="m-2">
				<div class="row g-2 mb-2">
					<div class="col-3">
						<label for="@LeaveRequestModel.AttributeNames.LeaveRequestCode" class="col-form-label col-md-12" localize-content>@LeaveRequestModel.AttributeNames.LeaveRequestCode</label>
						<input type="text" class="form-control form-control-sm" asp-for="LeaveRequestCode" />
					</div>

					<div class="col-3">
						<label for="@LeaveRequestModel.AttributeNames.ApprovalStatus" class="col-form-label col-md-12" localize-content>@LeaveRequestModel.AttributeNames.ApprovalStatus</label>
						<select class="form-select form-select-sm" asp-for="ApprovalStatus">
							<option value=""></option>
							@foreach (var item in Enum.GetValues(typeof(Enums.ApprovalStatus)))
							{
								<option value="@item" localize-content>@item</option>
							}
						</select>
					</div>

					<div class="col-3">
						<label for="@LeaveRequestModel.AttributeNames.LeaveDayType" class="col-form-label col-md-12" localize-content>@LeaveRequestModel.AttributeNames.LeaveDayType</label>
						<select class="form-select form-select-sm" asp-for="LeaveDayType">
							<option value=""></option>
							@foreach (var item in Enum.GetValues(typeof(Enums.LeaveDayType)))
							{
								<option value="@item" localize-content>@item</option>
							}
						</select>
					</div>

					<div class="col-3">
						<label for="@LeaveRequestModel.AttributeNames.ApprovalDate" class="col-form-label col-md-12" localize-content>@LeaveRequestModel.AttributeNames.ApprovalDate</label>
						<input type="date" class="form-control form-control-sm" asp-for="ApprovalDate" />
					</div>

					<div class="col-3">
						<label for="@LeaveRequestModel.AttributeNames.RequestDate" class="col-form-label col-md-12" localize-content>@LeaveRequestModel.AttributeNames.RequestDate</label>
						<input type="date" class="form-control form-control-sm" asp-for="RequestDate" />
					</div>

					<div class="col-3">
						<label for="@Constants.DateCreate" class="col-form-label col-md-12" localize-content>@Constants.DateCreate</label>
						<input type="date" class="form-control form-control-sm" asp-for="DateCreate" />
					</div>

					<div class="col-3">
						<label for="@Constants.DateUpdate" class="col-form-label col-md-12" localize-content>@Constants.DateUpdate</label>
						<input type="date" class="form-control form-control-sm" asp-for="DateUpdate" />
					</div>
				</div>

				<div class="text-end">
					<button type="button" class="btn btn-info" id="search-button">
						<i class="fa-solid fa-magnifying-glass"></i> <span localize-content>@Constants.ButtonSearch</span>
					</button>
					<button type="button" class="btn btn-secondary" id="clear-button">
						<i class="fa-solid fa-broom"></i> <span localize-content>@Constants.ButtonClear</span>
					</button>
				</div>
			</form>
		</div>
	</section>

	<!--& TABLE -->
	<section class="table-wrapper card">
		<div class="table-wrapper-body row">
			<div class="table-wrapper-main" id="@TableName.LeaveRequest-table">
			</div>
		</div>
	</section>

	<!--& MODAL -->
	<section class="modal-wrapper">
		@await Html.PartialAsync(ScreenName.LeaveRequest.LeaveRequestForm, Model)
		@await Component.InvokeAsync(Constants.Import, TableName.LeaveRequest)
		@await Component.InvokeAsync(Constants.Export, TableName.LeaveRequest)
	</section>
</div>

<script>
	let $leaveRequestId;
	let $searchForm;

	$(function () {
		// Kích hoạt strict mode cho toàn bộ code bên trong hàm này
		'use strict';

		$searchForm = $("#@TableName.LeaveRequest-search-form");

		loadLeaveRequests($searchForm);

		$("#refresh-list").click(function(){
			loadLeaveRequests($searchForm);
		});

		$("#is-delete").change(function () {
			loadLeaveRequests($searchForm);
		});

		$(document).on("change", ".@TableName.LeaveRequest-checkbox", function () {
			// Gán giá trị cho biến Id để sử dụng với các hành động (sửa, xóa, v.v.)
			$leaveRequestId = $(this).is(":checked") ? $(this).closest("tr").find('input[name="@LeaveRequestModel.AttributeNames.LeaveRequestId"]').val() : "";

			// Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
			const $length = $(".@TableName.LeaveRequest-checkbox:checked").length;
			checkLengthCheckbox($length, true, true, true, true, "@TableName.LeaveRequest-checkbox");
		});

		$("#create-button").click(function () {
			$("#only-save-button").css("display", "flex");
		});

		$("#edit-button").click(function () {
			$("#only-save-button").css("display", "none");

			callApi("@Url.Action(Constants.CreateOrEdit, TableName.LeaveRequest)/" + $leaveRequestId, "GET")
				.then(data => {
					// Khi trả ra json các field sẽ bị viết thường chữ cái đâu
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.LeaveRequestId").val(data.id);
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.LeaveRequestCode").val(data.leaveRequestCode);
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.RequestDate").val(formatDateToInput(data.requestDate));
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.LeaveStartDate").val(formatDateToInput(data.leaveStartDate));
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.LeaveEndDate").val(formatDateToInput(data.leaveEndDate));
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.TotalLeaveDays").val(data.totalLeaveDays);
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.ApprovedByIds").val(data.approvedByIds);
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.ApprovalDate").val(formatDateToInput(data.approvalDate));
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.Note").val(data.note);
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.ApprovalStatus").val(data.approvalStatus).trigger("change");
					$("#@TableName.LeaveRequest #@LeaveRequestModel.AttributeNames.LeaveDayType").val(data.leaveDayType).trigger("change");
				})
				.catch(err => {
					showMessage("@Localizer[Messages.ErrorCallAPI]");
				});
		});

		$("#delete-button").click(function () {
			deleteLeaveRequest("@Constants.Delete", $(this).closest("form"));
		});

		$("#delete-permanently-button").click(function () {
			deleteLeaveRequest("@Constants.DeletePermanently", $(this).closest("form"));
		});

		$("#search-button").click(function () {
			 loadLeaveRequests($searchForm);
		});

		$("#clear-button").click(function () {
			 $searchForm.get(0).reset();

			loadLeaveRequests($searchForm);
		});
	});

	function deleteLeaveRequest(actionName, $form) {
		// Lấy tất cả các Id của các checkbox đã chọn
		const $ids = $(".@TableName.LeaveRequest-checkbox:checked").map(function () {
			return $(this).closest("tr").find('input[name="@LeaveRequestModel.AttributeNames.LeaveRequestId"]').val();
		}).get().join(",");

		$form.find("#Ids").val($ids);

		// Tạo URL API bằng JavaScript lấy URL cơ bản của Controller (tùy chọn)
		const baseUrl = "@Url.Action("", TableName.LeaveRequest)";

		// Thay thế 'actionName' vào URL
		const apiUrl = baseUrl.endsWith('/') ? baseUrl + actionName : baseUrl + '/' + actionName;

		const $formData = new FormData($form[0]);

		callApi(apiUrl, "POST", $formData)
			.then(data => {
				loadLeaveRequests($searchForm);
			})
			.catch(err => {
				showMessage("@Localizer[Messages.ErrorCallAPI]");
			});
	}

	function loadLeaveRequests($form, pageIndex) {
		$(".loader").fadeIn(350);

		const $formData = new FormData($form.get(0));

		const filter = new FormData();
		filter.append("@Constants.PageIndex", pageIndex);

		const $isDelete = $("#is-delete").is(":checked");
		filter.append("@Constants.IsDelete", $isDelete);

		// Xóa các key không cần thiết (__Invariant)
		for (const [key, value] of $formData.entries()) {
			if (key !== "__Invariant") {
				filter.append(key, value);
			}
		}

		callApi("@Url.Action(Constants.GetList, TableName.LeaveRequest)", "POST", filter, "#@TableName.LeaveRequest-table")
			.then(data => {
				// Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
				checkLengthCheckbox(0, true, true, true, true, "@TableName.LeaveRequest-checkbox");

				// Load lại table thì gán lại "" để khi bám nút thêm không lỗi
				$leaveRequestId = "";
			})
			.catch(err => {
				showMessage("@Localizer[Messages.ErrorCallAPI]");
			});
	}
</script>