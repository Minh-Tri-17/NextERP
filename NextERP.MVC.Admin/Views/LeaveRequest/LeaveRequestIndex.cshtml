@using NextERP.ModelBase
@using NextERP.Util
@model NextERP.ModelBase.LeaveRequestModel

@{
    ViewData["Title"] = TableName.LeaveRequest;
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Breadcrumbs = new List<(string Title, string Url, bool IsActive)>
{
        (TableName.LeaveRequest + "List", "", true),
    };
}

<div class="main-container">
    <div id="success-msg" class="position-fixed top-0 end-0 p-3 m-2 d-none" role="alert" aria-live="assertive" aria-atomic="true"></div>
    <input type="hidden" id="current-page-index" value="1" />

    <!--& FILTER -->
    <section class="filter-panel card">
        <form method="post">
            <div class="filter-actions">
                <button type="button" class="btn btn-success create-edit-button" id="create-button" data-bs-toggle="modal" data-bs-target="#create-edit-modal" localize-content>
                    Create
                </button>
                <button type="button" class="btn btn-warning create-edit-button disabled" id="edit-button" data-bs-toggle="modal" data-bs-target="#create-edit-modal" localize-content>
                    Edit
                </button>
                <input type="text" name="Ids" id="Ids" hidden />
                <button type="button" class="btn btn-danger disabled" id="delete-button" localize-content>
                    Delete
                </button>
                <button type="button" class="btn btn-danger disabled" id="delete-permanently-button" localize-content>
                    DeletePermanently
                </button>
                <button type="button" class="btn btn-secondary" id="import-button" data-bs-toggle="modal" data-bs-target="#import-modal" localize-content>
                    Import
                </button>
                <button type="button" class="btn btn-secondary" id="export-button" data-bs-toggle="modal" data-bs-target="#export-modal" localize-content>
                    Export
                </button>
                <button type="button" class="btn btn-outline-secondary" data-bs-toggle="collapse" data-bs-target="#filter-inputs" aria-expanded="true" aria-controls="filter-inputs">
                    <i class="fa-solid fa-filter"></i>
                </button>
                <a href="#" id="refresh-list"><i class="fa-solid fa-rotate"></i></a>
                <div class="d-flex align-items-center ms-2 pb-2">
                    <input class="form-check-input" type="checkbox" value="" id="is-delete">
                    <label class="form-check-label fs-5" for="is-delete" localize-content>IsDelete</label>
                </div>
            </div>
        </form>

        @* Truyền id nào thì sẽ hiện thị control filter đó nối nhau bởi dấu , và không có khoảng trắng *@
        @await Component.InvokeAsync(Constants.SearchBox, new { showClass = "#filter-name" })
    </section>

    <!--& TABLE -->
    <section class="table-wrapper card">
        <div class="table-wrapper-body row">
            <div class="table-wrapper-main" id="@TableName.LeaveRequest-table">
            </div>
        </div>
    </section>

    <!--& MODAL -->
    <section class="modal-wrapper">
        @await Html.PartialAsync(ScreenName.LeaveRequest.LeaveRequestForm, Model)
        @await Component.InvokeAsync(Constants.Import, TableName.LeaveRequest)
        @await Component.InvokeAsync(Constants.Export, TableName.LeaveRequest)
    </section>
</div>

<script>
    let $leaveRequestId;

    $(function () {
        loadLeaveRequests();
    });

    $("#refresh-list").click(function(){
        loadLeaveRequests();
    });

    $("#is-delete").change(function () {
        loadLeaveRequests();
    })

    $(document).on("change", ".@TableName.LeaveRequest-checkbox", function () {
        // Gán giá trị cho biến Id để sử dụng với các hành động (sửa, xóa, v.v.)
        $leaveRequestId = $(this).is(":checked") ? $(this).closest("tr").find('input[name="@AttributeNames.LeaveRequest.LeaveRequestId"]').val() : "";

        // Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
        const $length = $(".@TableName.LeaveRequest-checkbox:checked").length;
        checkLengthCheckbox($length, true, true, true, true, "@TableName.LeaveRequest-checkbox");
    });

    $(".create-edit-button").click(function () {
        $("#only-save-button").css("display",  $leaveRequestId ? "none" : "block");

        callApi("@Url.Action(Constants.CreateOrEdit, TableName.LeaveRequest)/" + $leaveRequestId, "GET")
            .then(data => {
                // Khi trả ra json các field sẽ bị viết thường chữ cái đâu
                $("#@AttributeNames.LeaveRequest.LeaveRequestId").val(data.id);
                $("#@AttributeNames.LeaveRequest.LeaveRequestCode").val(data.leaveRequestCode);
                $("#@AttributeNames.LeaveRequest.RequestDate").val(formatDateToInput(data.requestDate));
                $("#@AttributeNames.LeaveRequest.LeaveStartDate").val(formatDateToInput(data.leaveStartDate));
                $("#@AttributeNames.LeaveRequest.LeaveEndDate").val(formatDateToInput(data.leaveEndDate));
                $("#@AttributeNames.LeaveRequest.TotalLeaveDays").val(data.totalLeaveDays);
                $("#@AttributeNames.LeaveRequest.LeaveDayType").val(data.leaveDayType);
                $("#@AttributeNames.LeaveRequest.ApprovalStatus").val(data.approvalStatus);
                $("#@AttributeNames.LeaveRequest.ApprovedByIds").val(data.approvedByIds);
                $("#@AttributeNames.LeaveRequest.ApprovalDate").val(formatDateToInput(data.approvalDate));
                $("#@AttributeNames.LeaveRequest.Note").val(data.note);
            })
            .catch(err => {
                showMessage({ success: false, message: "Có lỗi xảy ra!" });
            });
    });

    $("#delete-button").click(function () {
        // Lấy tất cả các Id của các checkbox đã chọn
        const $ids = $(".@TableName.LeaveRequest-checkbox:checked").map(function () {
            return $(this).closest("tr").find('input[name="@AttributeNames.LeaveRequest.LeaveRequestId"]').val();
        }).get().join(",");

        $("#Ids").val($ids);

        const $form = $(this).closest("form");
        const formData = new FormData($form[0]);

        callApi("@Url.Action(Constants.Delete, TableName.LeaveRequest)", "POST", formData)
            .then(data => {
                loadLeaveRequests();

                // Load lại table thì gán lại "" để khi bám nút thêm không lỗi
                $leaveRequestId = "";
            })
            .catch(err => {
                showMessage({ success: false, message: "Có lỗi xảy ra!" });
            });
    });

    $("#delete-permanently-button").click(function () {
        // Lấy tất cả các Id của các checkbox đã chọn
        const $ids = $(".@TableName.LeaveRequest-checkbox:checked").map(function () {
            return $(this).closest("tr").find('input[name="@AttributeNames.LeaveRequest.LeaveRequestId"]').val();
        }).get().join(",");

        $("#Ids").val($ids);

        const $form = $(this).closest("form");
        const formData = new FormData($form[0]);

        callApi("@Url.Action(Constants.DeletePermanently, TableName.LeaveRequest)", "POST", formData)
            .then(data => {
                loadLeaveRequests();

                // Load lại table thì gán lại "" để khi bám nút thêm không lỗi
                $leaveRequestId = "";
            })
            .catch(err => {
                showMessage({ success: false, message: "Có lỗi xảy ra!" });
            });
    });

    $("#search-button").click(function () {
        loadLeaveRequests();
    })

    $("#clear-button").click(function () {
        $("#filter-name").val("");

        loadLeaveRequests();
    })

    function loadLeaveRequests(pageIndex) {
        // Khỏi tạo filter và gán giá trị
        const $keyWord = $("#filter-name").val();
        const $isDelete = $("#is-delete").is(":checked");

        let filter = new FormData();
        filter.append("@Constants.PageIndex", pageIndex);
        filter.append("@Constants.KeyWord", $keyWord);
        filter.append("@Constants.IsDelete", $isDelete);

        $(".loader").css("display", "flex");

        callApi("@Url.Action(Constants.GetList, TableName.LeaveRequest)", "POST", filter, "#@TableName.LeaveRequest-table")
            .then(data => {
                // Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
                checkLengthCheckbox(0, true, true, true, true, "@TableName.LeaveRequest-checkbox");

                // Load lại table thì gán lại "" để khi bám nút thêm không lỗi
                $leaveRequestId = "";
            })
            .catch(err => {
                showMessage({ success: false, message: "Có lỗi xảy ra!" });
            });
    }
</script>