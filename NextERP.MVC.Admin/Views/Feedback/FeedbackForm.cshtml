@using NextERP.ModelBase
@using NextERP.Util
@model NextERP.ModelBase.FeedbackModel
@inject LazZiya.ExpressLocalization.ISharedCultureLocalizer Localizer

<div class="modal fade" id="create-edit-modal" aria-hidden="true" tabindex="-1">
	<div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
		<div class="modal-content">
			<form class="needs-validation" id="@TableName.Feedback" novalidate>
				<div class="modal-header">
					<h1 class="modal-title fs-5" id="exampleModalLabel" localize-content>CreateOrEdit</h1>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>
				<div class="modal-body">
					<input id="@FeedbackModel.AttributeNames.FeedbackId" type="hidden" asp-for="Id" />

					<div class="mb-2">
						<label for="@FeedbackModel.AttributeNames.FeedbackCode" class="col-form-label col-md-12" localize-content>@FeedbackModel.AttributeNames.FeedbackCode</label>
						<div class="col-md-12">
							<input class="form-control form-control-sm" type="text" asp-for="FeedbackCode" disabled />
						</div>
					</div>

					<div class="mb-2">
						<label for="@FeedbackModel.AttributeNames.DateFeedback" class="col-form-label col-md-12" localize-content>@FeedbackModel.AttributeNames.DateFeedback</label>
						<div class="col-md-12">
							<input class="form-control form-control-sm" type="date" asp-for="DateFeedback" />
							<div class="invalid-feedback" id="invalid-@FeedbackModel.AttributeNames.DateFeedback" localize-content></div>
						</div>
					</div>

					<div class="mb-2">
						<div class="col-md-12">
							<div class="rating-container">
								@{
									int maxRating = 5;

									string[] titles = new string[] { "Bad", "Okay", "Good", "Great!", "Excellent!" };
								}

								<div class="rating">
									<div class="rating">
										@for (int i = maxRating; i >= 1; i--)
										{
											string title = titles[i - 1];
											string starId = $"star-{i}";

											<input value="@i" asp-for="Rating" id="@starId" type="radio" />
											<label title="@title" for="@starId">
												<svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512">
													<path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"></path>
												</svg>
											</label>
										}
									</div>
								</div>
							</div>
						</div>
					</div>

					<div class="mb-2">
						<label for="@FeedbackModel.AttributeNames.Comment" class="col-form-label col-md-12" localize-content>@FeedbackModel.AttributeNames.Comment</label>
						<div class="col-md-12">
							<textarea class="form-control form-control-sm" rows="3" asp-for="Comment"></textarea>
							<div class="invalid-feedback" id="invalid-@FeedbackModel.AttributeNames.Comment" localize-content></div>
						</div>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
						<i class="fa-solid fa-xmark"></i> <span localize-content>@Constants.ButtonClose</span>
					</button>
					<button type="button" class="button-outline btn save-button" id="only-save-button">
						@{
							var saveIcon = @"<svg class=""icon"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2.5""><path d=""M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z""></path><polyline points=""17 21 17 13 7 13 7 21""></polyline><polyline points=""7 3 7 8 15 8""></polyline></svg>";
						}

						@await Component.InvokeAsync(Constants.Button, new { nameButton = Constants.ButtonSave, iconHtml = saveIcon })
					</button>
					<button type="button" class="button btn save-button" data-bs-dismiss="modal">
						@{
							var saveAndCloseIcon = @"<svg class=""icon"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2.5""><path d=""M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z""></path><polyline points=""17 21 17 13 7 13 7 21""></polyline><polyline points=""7 3 7 8 15 8""></polyline></svg>";
						}

						@await Component.InvokeAsync(Constants.Button, new { nameButton = Constants.ButtonSaveAndClose, iconHtml = saveAndCloseIcon })
					</button>
				</div>
			</form>
		</div>
	</div>
</div>

<script>
	$(function () {
		// Kích hoạt strict mode cho toàn bộ code bên trong hàm này
		'use strict';

		$(".save-button").click(function () {
			const $searchForm = $("#@TableName.Feedback-search-form");
			const $saveForm = $(this).closest("form");
			const $formElement = $saveForm.get(0);
			const $formData = new FormData($formElement);
			let id = $formData.get("@Constants.Id");

			// Nếu không có ID (tạo mới), set Guid.Empty
			if (!id || id.trim() === "") {
				$formData.set("@Constants.Id", "@Guid.Empty");
			}

			callApi("@Url.Action(Constants.CreateOrEdit, TableName.Feedback)", "POST", $formData)
				.then(data => {
					loadFeedbacks($searchForm);

					if (data && Array.isArray(data)) {
						showInvalid(data, $formElement);
					}
				})
				.catch(err => {
					showMessage("@Localizer[Messages.ErrorCallAPI]");
				});
		});
	});
</script>
