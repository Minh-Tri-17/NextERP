@using System.Reflection
@using NextERP.ModelBase
@using NextERP.ModelBase.APIResult
@using NextERP.ModelBase.PagingResult
@using NextERP.Util
@using UtilHtmlHelper = NextERP.Util.HtmlHelper
@model APIBaseResult<PagingResult<FeedbackModel>>

<div class="table-container">
    <table class="table table-hover me-2">
        <thead>
            <tr>
                <th>
                    <div class="form-check">
                        <input class="check-all form-check-input" type="checkbox" />
                    </div>
                </th>
                <th>#</th>
                @{
                    var excludedFields = new[] { Constants.AllowPaging, Constants.PageIndex, Constants.PageSize, Constants.Id, Constants.Ids, Constants.IsDelete };

                    var listField = UtilHtmlHelper.GetOrderedProperties<FeedbackModel>(excludedFields);

                    foreach (var item in listField)
                    {
                        <th localize-content>@item.Name</th>
                    }
                }
            </tr>
        </thead>

        <tbody class="sortable-group table-group-divider">
            @if (DataHelper.ListIsNotNull(Model))
            {
                int counter = (Model!.Result!.PageIndex - 1) * Model.Result.PageSize + 1;

                foreach (var row in Model!.Result!.Items!)
                {
                    <tr>
                        <td>
                            <input type="hidden" name="@FeedbackModel.AttributeNames.FeedbackId" value="@row.Id" />
                            <div class="form-check">
                                <input class="form-check-input @TableName.Feedback-checkbox" type="checkbox" />
                            </div>
                        </td>
                        <td>@counter</td>
                        @foreach (var field in listField)
                        {
                            var value = field.GetValue(row);

                            if (field.Name == FeedbackModel.AttributeNames.Rating)
                            {
                                <td>
                                    <div class="rating-container">
                                        @{
                                            int maxRating = 5;

                                            string[] titles = new string[] { "Bad", "Okay", "Good", "Great!", "Excellent!" };
                                        }

                                        <div class="rating-view">
                                            @for (int i = maxRating; i >= 1; i--)
                                            {
                                                string title = titles[i - 1];
                                                string starId = $"star{i}-{row.Id}";
                                                string starClass = $"star-{i}";

                                                <input class="star-input @starClass" value="@i" name="rating-@row.Id" id="@starId" type="radio" disabled @(i == DataHelper.GetInt(value) ? "checked" : "") />
                                                <label title="@title" for="@starId">
                                                    <svg xmlns="http://www.w3.org/2000/svg" height="1em" viewBox="0 0 576 512">
                                                        <path d="M316.9 18C311.6 7 300.4 0 288.1 0s-23.4 7-28.8 18L195 150.3 51.4 171.5c-12 1.8-22 10.2-25.7 21.7s-.7 24.2 7.9 32.7L137.8 329 113.2 474.7c-2 12 3 24.2 12.9 31.3s23 8 33.8 2.3l128.3-68.5 128.3 68.5c10.8 5.7 23.9 4.9 33.8-2.3s14.9-19.3 12.9-31.3L438.5 329 542.7 225.9c8.6-8.5 11.7-21.2 7.9-32.7s-13.7-19.9-25.7-21.7L381.2 150.3 316.9 18z"></path>
                                                    </svg>
                                                </label>
                                            }
                                        </div>
                                    </div>
                                </td>
                            }
                            else
                            {
                                <td localize-content>@(value ?? "")</td>
                            }
                        }
                    </tr>

                    counter++;
                }
            }
        </tbody>
    </table>
</div>

@if (DataHelper.ListIsNotNull(Model))
{
    <nav id="pagination-container" aria-label="Page navigation">
        @await Component.InvokeAsync(Constants.Pagination, Model.Result)
    </nav>
}

<script>
	$(function () {
		// Kích hoạt strict mode cho toàn bộ code bên trong hàm này
		'use strict';

		$("#pagination-container").on("click", ".page-link", function () {
			const $pageIndex = $(this).data("page");
			if (!$pageIndex) return;

			// Xử lý active
			$("#pagination-container .page-item").removeClass("active");
			$(this).parent().addClass("active");

			const $searchForm = $("#@TableName.Feedback-search-form");

			loadFeedbacks($searchForm, $pageIndex);
		});

		$(".check-all").change(function () {
			// Gán giá trị cho tất cả checkbox Feedback-checkbox
			$(".@TableName.Feedback-checkbox").prop("checked", $(this).is(":checked") ? true : false);

			// Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
			const $length = $(".@TableName.Feedback-checkbox:checked").length;
			checkLengthCheckbox($length, true, true, true, true, "@TableName.Feedback-checkbox");
		});
	});
</script>