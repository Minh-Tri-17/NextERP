@using System.Reflection
@using NextERP.ModelBase
@using NextERP.ModelBase.APIResult
@using NextERP.ModelBase.PagingResult
@using NextERP.Util
@using UtilHtmlHelper = NextERP.Util.HtmlHelper
@model APIBaseResult<PagingResult<SpaServiceModel>>

<div class="table-container">
    <table class="table table-hover me-2">
        <thead>
            <tr>
                <th>
                    <div class="form-check">
                        <input class="check-all form-check-input" type="checkbox" />
                    </div>
                </th>
                <th>#</th>
                @{
                    var excludedFields = new[] { Constants.PageIndex, Constants.PageSize, Constants.Id, Constants.IsDelete };

                    var listField = UtilHtmlHelper.GetOrderedProperties<SpaServiceModel>(excludedFields);

                    foreach (var item in listField)
                    {
                        <th localize-content>@item.Name</th>
                    }
                }
            </tr>
        </thead>

        <tbody class="sortable-group table-group-divider">
            @if (DataHelper.ListIsNotNull(Model))
            {
                int counter = (Model!.Result!.PageIndex - 1) * Model.Result.PageSize + 1;

                foreach (var row in Model!.Result!.Items!)
                {
                    <tr>
                        <td>
                            <input type="hidden" name="@AttributeNames.SpaService.SpaServiceId" value="@row.Id" />
                            <div class="form-check">
                                <input class="form-check-input @TableName.SpaService-checkbox" type="checkbox" />
                            </div>
                        </td>
                        <td>@counter</td>
                        @foreach (var field in listField)
                        {
                            var value = field.GetValue(row);

                            if (field.PropertyType == typeof(decimal) || field.PropertyType == typeof(decimal?))
                            {
                                <td>
                                    @{
                                        decimal decimalValue = value != null ? Convert.ToDecimal(value) : 0;
                                        string formattedValue;
                                        if (decimalValue < 1000)
                                        {
                                            formattedValue = string.Format("{0:#,##0} {1}", decimalValue, Constants.Currency);
                                        }
                                        else if (decimalValue < 1000000)
                                        {
                                            formattedValue = string.Format("{0:#,##0.###}K {1}", decimalValue / 1000, Constants.Currency);
                                        }
                                        else
                                        {
                                            formattedValue = string.Format("{0:#,##0.###}M {1}", decimalValue / 1000000, Constants.Currency);
                                        }
                                    }
                                    @formattedValue
                                </td>
                            }
                            else
                            {
                                <td localize-content>@(value ?? "")</td>
                            }
                        }
                    </tr>

                    counter++;
                }
            }
        </tbody>
    </table>
</div>

@if (DataHelper.ListIsNotNull(Model))
{
    <nav id="pagination-container" aria-label="Page navigation">
        @await Component.InvokeAsync(Constants.Pagination, Model.Result)
    </nav>
}

<script>
    $("#pagination-container").on("click", ".page-link", function (e) {
        e.preventDefault(); // Ngăn chặn chuyển trang

        const $pageIndex = $(this).data("page");
        if (!$pageIndex) return;

        $("#current-page-index").val($pageIndex);

        // Xử lý active
        $("#pagination-container .page-item").removeClass("active");
        $(this).parent().addClass("active");

        loadSpaServices($("#spaService-search-form")[0], $pageIndex);
    });

    $(".check-all").change(function () {
        // Gán giá trị cho tất cả checkbox SpaService-checkbox
        $(".@TableName.SpaService-checkbox").prop("checked", $(this).is(":checked") ? true : false);

        // Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
        const $length = $(".@TableName.SpaService-checkbox:checked").length;
        checkLengthCheckbox($length, true, true, true, true, "@TableName.SpaService-checkbox");
    });
</script>