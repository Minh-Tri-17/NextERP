@using NextERP.ModelBase
@using NextERP.Util
@model NextERP.ModelBase.ProductModel

@{
    ViewData["Title"] = TableName.Product;
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Breadcrumbs = new List<(string Title, string Url, bool IsActive)>
{
        (TableName.Product + "List", "", true),
    };
}

<div class="main-container">
    <div id="success-msg" class="position-fixed top-0 end-0 p-3 m-2 d-none" role="alert" aria-live="assertive" aria-atomic="true"></div>
    <input type="hidden" id="current-page-index" value="1" />

    <!--& FILTER -->
    <section class="filter-panel card">
        <form method="post">
            <div class="filter-actions">
                <button type="button" class="btn btn-success" id="create-button" data-bs-toggle="modal" data-bs-target="#create-edit-modal" localize-content>
                    Create
                </button>
                <button type="button" class="btn btn-warning disabled" id="edit-button" data-bs-toggle="modal" data-bs-target="#create-edit-modal" localize-content>
                    Edit
                </button>
                <input type="text" name="Ids" id="Ids" hidden />
                <button type="button" class="btn btn-danger disabled" id="delete-button" localize-content>
                    Delete
                </button>
                <button type="button" class="btn btn-danger disabled" id="delete-permanently-button" localize-content>
                    DeletePermanently
                </button>
                <button type="button" class="btn btn-secondary" id="import-button" data-bs-toggle="modal" data-bs-target="#import-modal" localize-content>
                    Import
                </button>
                <button type="button" class="btn btn-secondary" id="export-button" data-bs-toggle="modal" data-bs-target="#export-modal" localize-content>
                    Export
                </button>
                <button type="button" class="btn btn-outline-secondary" data-bs-toggle="collapse" data-bs-target="#filter-inputs" aria-expanded="true" aria-controls="filter-inputs">
                    <i class="fa-solid fa-filter"></i>
                </button>
                <a href="#" id="refresh-list"><i class="fa-solid fa-rotate"></i></a>
                <div class="d-flex align-items-center ms-2 pb-2">
                    <input class="form-check-input" type="checkbox" value="" id="is-delete">
                    <label class="form-check-label fs-5" for="is-delete" localize-content>IsDelete</label>
                </div>
            </div>
        </form>

        <div class="collapse" id="filter-inputs">
            <form id="@TableName.Product-search-form" class="m-2">
                <div class="row g-2 mb-2">
                    <div class="col-3">
                        <label for="@AttributeNames.Product.ProductCode" class="col-form-label col-md-6" localize-content>@AttributeNames.Product.ProductCode</label>
                        <input type="text" class="form-control form-control-sm" asp-for="ProductCode" />
                    </div>

                    <div class="col-3">
                        <label for="@AttributeNames.Product.ExpirationDate" class="col-form-label col-md-6" localize-content>@AttributeNames.Product.ExpirationDate</label>
                        <input type="date" class="form-control form-control-sm" asp-for="ExpirationDate" />
                    </div>

                    <div class="col-3">
                        <label for="@Constants.DateCreate" class="col-form-label col-md-6" localize-content>@Constants.DateCreate</label>
                        <input type="date" class="form-control form-control-sm" asp-for="DateCreate" />
                    </div>

                    <div class="col-3">
                        <label for="@Constants.DateUpdate" class="col-form-label col-md-6" localize-content>@Constants.DateUpdate</label>
                        <input type="date" class="form-control form-control-sm" asp-for="DateUpdate" />
                    </div>
                </div>

                <div class="text-end">
                    <button type="button" class="btn btn-info" id="search-button" localize-content>Search</button>
                    <button type="button" class="btn btn-secondary" id="clear-button" localize-content>Clear</button>
                </div>
            </form>
        </div>
    </section>

    <!--& TABLE -->
    <section class="table-wrapper card">
        <div class="table-wrapper-body row">
            <div class="table-wrapper-main" id="@TableName.Product-table">
            </div>
        </div>
    </section>

    <!--& MODAL -->
    <section class="modal-wrapper">
        @await Html.PartialAsync(ScreenName.Product.ProductForm, Model)
        @await Component.InvokeAsync(Constants.Import, TableName.Product)
        @await Component.InvokeAsync(Constants.Export, TableName.Product)
    </section>
</div>

<script>
    let $productId;

    $(function () {
        loadProducts();
    });

    $("#refresh-list").click(function () {
        loadProducts();
    });

    $("#is-delete").change(function () {
        loadProducts();
    })

    $(document).on("change", ".@TableName.Product-checkbox", function () {
        // Gán giá trị cho biến Id để sử dụng với các hành động (sửa, xóa, v.v.)
        $productId = $(this).is(":checked") ? $(this).closest("tr").find('input[name="@AttributeNames.Product.ProductId"]').val() : "";

        // Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
        const $length = $(".@TableName.Product-checkbox:checked").length;
        checkLengthCheckbox($length, true, true, true, true, "@TableName.Product-checkbox");
    });

    $("#create-button").click(function () {
        $("#only-save-button").css("display", "block");
    });

    $("#edit-button").click(function () {
        $("#only-save-button").css("display", "none");

        callApi("@Url.Action(Constants.CreateOrEdit, TableName.Product)/" + $productId, "GET")
            .then(data => {
                // Khi trả ra json các field sẽ bị viết thường chữ cái đâu
                $("#@TableName.Product #@AttributeNames.Product.ProductId").val(data.id);
                $("#@TableName.Product #@AttributeNames.Product.ProductCode").val(data.productCode);
                $("#@TableName.Product #@AttributeNames.Product.ProductName").val(data.productName);
                $("#@TableName.Product #@AttributeNames.Product.QuantityInStock").val(data.quantityInStock);
                $("#@TableName.Product #@AttributeNames.Product.Price").val(data.price);
                $("#@TableName.Product #@AttributeNames.Product.ExpirationDate").val(formatDateToInput(data.expirationDate));
                $("#@TableName.Product #@AttributeNames.Product.Manufacturer").val(data.manufacturer);
                $("#@TableName.Product #@AttributeNames.Product.CountryOfOrigin").val(data.countryOfOrigin);
                $("#@TableName.Product #@AttributeNames.Product.ReorderLevel").val(data.reorderLevel);
                $("#@TableName.Product #@AttributeNames.Product.Note").val(data.note);
            })
            .catch(err => {
                showMessage({ success: false, message: "F:Có lỗi xảy ra!" });
            });
    });

    $("#delete-button").click(function () {
        // Lấy tất cả các Id của các checkbox đã chọn
        const $ids = $(".@TableName.Product-checkbox:checked").map(function () {
            return $(this).closest("tr").find('input[name="@AttributeNames.Product.ProductId"]').val();
        }).get().join(",");

        $("#Ids").val($ids);

        const $form = $(this).closest("form");
        const formData = new FormData($form[0]);

        callApi("@Url.Action(Constants.Delete, TableName.Product)", "POST", formData)
            .then(data => {
                loadProducts();
            })
            .catch(err => {
                showMessage({ success: false, message: "F:Có lỗi xảy ra!" });
            });
    });

    $("#delete-permanently-button").click(function () {
        // Lấy tất cả các Id của các checkbox đã chọn
        const $ids = $(".@TableName.Product-checkbox:checked").map(function () {
            return $(this).closest("tr").find('input[name="@AttributeNames.Product.ProductId"]').val();
        }).get().join(",");

        $("#Ids").val($ids);

        const $form = $(this).closest("form");
        const formData = new FormData($form[0]);

        callApi("@Url.Action(Constants.DeletePermanently, TableName.Product)", "POST", formData)
            .then(data => {
                loadProducts();
            })
            .catch(err => {
                showMessage({ success: false, message: "F:Có lỗi xảy ra!" });
            });
    });

    $("#search-button").click(function () {
        loadProducts();
    })

    $("#clear-button").click(function () {
        $("#@TableName.Product-search-form")[0].reset();

        loadProducts();
    })

    function loadProducts(el, pageIndex) {
        // Khỏi tạo filter và gán giá trị
        const $isDelete = $("#is-delete").is(":checked");
        $(".loader").css("display", "flex");

        const $form = $(el).closest("form");
        const formData = new FormData($form[0]);

        // Xóa các key không cần thiết (__Invariant)
        const cleanEntries = Array.from(formData.entries()).filter(([key]) => key !== "__Invariant");

        const filter = new FormData();
        cleanEntries.forEach(([key, value]) => filter.append(key, value));
        filter.append("@Constants.PageIndex", pageIndex);
        filter.append("@Constants.IsDelete", $isDelete);

        callApi("@Url.Action(Constants.GetList, TableName.Product)", "POST", filter, "#@TableName.Product-table")
            .then(data => {
                // Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
                checkLengthCheckbox(0, true, true, true, true, "@TableName.Product-checkbox");

                // Load lại table thì gán lại "" để khi bám nút thêm không lỗi
                $productId = "";
            })
            .catch(err => {
                showMessage({ success: false, message: "F:Có lỗi xảy ra!" });
            });
    }
</script>