@using NextERP.ModelBase
@using NextERP.Util
@using static NextERP.Util.Enums
@model NextERP.ModelBase.UserModel
@inject LazZiya.ExpressLocalization.ISharedCultureLocalizer Localizer

@{
	Layout = null;
}

<!DOCTYPE html>
<html lang="vi">
<head>
	<meta charset="UTF-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1.0" />
	<title>Next ERP | @Localizer[ViewBag.Title]</title>
	<link rel="icon" type="image/x-icon" href="~/favicon.ico" />
	<link rel="stylesheet" href="~/lib/css/apexcharts/apexcharts.min.css" />
	<link rel="stylesheet" href="~/lib/css/bootstrap/bootstrap.min.css" />
	<link rel="stylesheet" href="~/css/login.css" />
	<script src="~/lib/js/jquery/jquery.min.js"></script>
	<script src="~/js/helper.js"></script>
</head>

<body>
	<div class="login-wrapper" id="loginWrapper">
		<div id="success-msg" class="position-fixed top-0 end-0 p-3 m-2 d-none" role="alert" aria-live="assertive" aria-atomic="true"></div>

		<!--& LOGIN -->
		<form class="card login-container needs-validation" asp-action="AccountIndex" asp-controller="Account" novalidate>
			<input type="hidden" asp-for="GroupRole" value="Admin" />

			<h2 class="text-center" localize-content>Account</h2>
			<div class="login-form">
				<div class="mb-2">
					<label for="@UserModel.AttributeNames.Username" class="col-form-label col-md-6" localize-content>Username</label>
					<div class="col-md-12">
						<input class="form-control form-control-sm" type="text" asp-for="Username" />
						<div class="invalid-feedback" localize-content>InvalidUsername</div>
					</div>
				</div>

				<div class="mb-2">
					<label for="@UserModel.AttributeNames.Password" class="col-form-label col-md-6" localize-content>Password</label>
					<div class="col-md-12">
						<input class="form-control form-control-sm" type="password" asp-for="Password" />
						<div class="invalid-feedback" localize-content>InvalidPassword</div>
					</div>
				</div>

				<div class="d-flex justify-content-between align-items-center my-3">
					<div class="form-check">
						<input class="form-check-input" type="checkbox" asp-for="Remember" />
						<label class="form-check-label" for="@UserModel.AttributeNames.Remember" localize-content>RememberMe</label>
					</div>
					<a href="#" id="forgot-password" localize-content>ForgotPassword</a>
				</div>

				<div class="d-flex justify-content-end">
					<button type="submit" class="button btn">
						@{
							string loginIcon = @"<svg class=""icon"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2.5""><path d=""M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4""></path><polyline points=""10 17 15 12 10 7""></polyline><line x1=""15"" y1=""12"" x2=""3"" y2=""12""></line></svg>";
						}

						@await Component.InvokeAsync(Constants.Button, new { nameButton = Constants.Login, iconHtml = loginIcon })
					</button>
				</div>
			</div>
		</form>

		<!--& FORGOT PASSWORD -->
		<div class="card forgot-container">
			<h2 class="text-center" localize-content>ForgotPassword</h2>
			<form class="needs-validation" asp-action="AccountIndex" asp-controller="Account" novalidate>
				<h4 class="text-center" localize-content>StepSendOTP</h4>
				<div class="forgot-form">
					<div class="mb-2">
						<label for="To" class="col-form-label col-md-6" localize-content>Mail</label>
						<div class="col-md-12">
							<input class="form-control form-control-sm" type="text" id="mail-to" name="To" />
							<div class="invalid-feedback" id="invalid-To" localize-content></div>
						</div>
					</div>

					<div class="my-3 text-center">
						<button type="button" id="send-otp" class="button-outline btn">
							@{
								string sendOTPIcon = @"<svg class=""icon"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2.5""><path d=""M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z""></path><polyline points=""22,6 12,13 2,6""></polyline></svg>";
							}

							@await Component.InvokeAsync(Constants.Button, new { nameButton = Constants.SendOTP, iconHtml = sendOTPIcon })
						</button>
					</div>
				</div>
			</form>
			<hr>
			<form class="needs-validation" asp-action="AccountIndex" asp-controller="Account" novalidate>
				<h4 class="text-center" localize-content>StepResetPassword</h4>
				<div class="forgot-form">
					<input type="hidden" asp-for="Mail" />
					<div class="mb-2">
						<label for="@UserModel.AttributeNames.Username" class="col-form-label col-md-6" localize-content>Username</label>
						<div class="col-md-12">
							<input class="form-control form-control-sm" type="text" asp-for="Username" />
							<div class="invalid-feedback" localize-content>InvalidUsername</div>
						</div>
					</div>

					<div class="mb-2">
						<label for="New-@UserModel.AttributeNames.Password" class="col-form-label" localize-content>NewPassword</label>
						<div class="col-md-12">
							<input class="form-control form-control-sm" type="password" id="New-@UserModel.AttributeNames.Password" asp-for="Password" />
							<div class="invalid-feedback" localize-content>InvalidNewPassword</div>
						</div>
					</div>

					<div class="mb-2">
						<label for="@UserModel.AttributeNames.PhoneNumber" class="col-form-label" localize-content>PhoneNumberRegistered</label>
						<div class="col-md-12">
							<input class="form-control form-control-sm" type="text" asp-for="PhoneNumber" />
							<div class="invalid-feedback" localize-content>InvalidPhoneNumberRegistered</div>
						</div>
					</div>

					<div class="mb-2">
						<label for="@UserModel.AttributeNames.Otp" class="col-form-label col-md-6" localize-content>OTP</label>
						<div class="col-md-12">
							<input class="form-control form-control-sm" type="text" asp-for="Otp" />
							<div class="invalid-feedback" localize-content>InvalidOTP</div>
						</div>
					</div>

					<div class="my-3 text-center">
						<button type="button" id="reset-password" class="button btn">
							@{
								var registerIcon = @"<svg class=""icon"" fill=""none"" stroke=""currentColor"" viewBox=""0 0 24 24"" xmlns=""http://www.w3.org/2000/svg"" stroke-linecap=""round"" stroke-linejoin=""round"" stroke-width=""2.5""><path d=""M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2""></path><circle cx=""8.5"" cy=""7"" r=""4""></circle><line x1=""20"" y1=""8"" x2=""20"" y2=""14""></line><line x1=""23"" y1=""11"" x2=""17"" y2=""11""></line></svg>";
							}

							@await Component.InvokeAsync(Constants.Button, new { nameButton = "Register", iconHtml = registerIcon })
						</button>
					</div>
				</div>
			</form>

			<div class="text-center">
				<a href="#" id="back-login" localize-content>BackLogin</a>
			</div>
		</div>
	</div>

	<script>
		$(function () {
			'use strict';

			// Lấy tất cả form cần validation
			const forms = document.querySelectorAll('.needs-validation');

			Array.from(forms).forEach(form => {
				form.addEventListener('submit', event => {
					if (!form.checkValidity()) {
						event.preventDefault();
						event.stopPropagation();
					}
					form.classList.add('was-validated');
				}, false);
			});
		});

		$("#send-otp").click(function () {
			const $form = $(this).closest("form");
			const formData = new FormData($form[0]);
			const formElement = $form[0];

			callApi("@Url.Action(Constants.SendOTP, Constants.Account)", "POST", formData)
				.then(data => {
					if (data && Array.isArray(data)) {
						showInvalid(data, formElement);
					}

					var mailTo = $("#mail-to").val();
					$("#Mail").val(mailTo);
				})
				.catch(err => {
					showMessage("@Localizer[Messages.ErrorCallAPI]");
				});
		});

		$("#reset-password").click(function () {
			const $form = $(this).closest("form");
			const formData = new FormData($form[0]);
			const formElement = $form[0];

			callApi("@Url.Action(Constants.ResetPassword, Constants.Account)", "POST", formData)
				.then(data => {
					if (data && Array.isArray(data)) {
						showInvalid(data, formElement);
					}
				})
				.catch(err => {
					showMessage("@Localizer[Messages.ErrorCallAPI]");
				});
		});
	</script>

	<script src="~/lib/js/bootstrap/bootstrap.bundle.min.js"></script>
	<script src="~/lib/js/bootstrap/popper.min.js"></script>
	<script src="~/lib/js/jquery/jquery.min.js"></script>
	<script src="~/js/login.js"></script>
	<script src="~/js/helper.js"></script>
</body>
</html>
