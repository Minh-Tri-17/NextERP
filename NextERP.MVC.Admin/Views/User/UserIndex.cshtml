@using NextERP.ModelBase
@using NextERP.Util
@model NextERP.ModelBase.UserModel
@inject LazZiya.ExpressLocalization.ISharedCultureLocalizer Localizer

@{
    ViewData["Title"] = TableName.User;
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Breadcrumbs = new List<(string Title, string Url, bool IsActive)>
{
        (TableName.User + "List", "", true),
    };
}

<div class="main-container">
    <div id="success-msg" class="position-fixed top-0 end-0 p-3 m-2 d-none" role="alert" aria-live="assertive" aria-atomic="true"></div>
    <input type="hidden" id="current-page-index" value="1" />

    <!--& FILTER -->
    <section class="filter-panel card">
        <form method="post">
            <div class="filter-actions">
                <button type="button" class="btn btn-success" id="create-button" data-bs-toggle="modal" data-bs-target="#create-edit-modal">
                    <i class="fa-solid fa-plus"></i> <span localize-content>Create</span>
                </button>
                <button type="button" class="btn btn-warning disabled" id="edit-button" data-bs-toggle="modal" data-bs-target="#create-edit-modal">
                    <i class="fa-solid fa-pen"></i> <span localize-content>Edit</span>
                </button>
                <input type="text" name="Ids" id="Ids" hidden />
                <button type="button" class="btn btn-danger disabled" id="delete-button">
                    <i class="fa-solid fa-trash"></i> <span localize-content>Delete</span>
                </button>
                <button type="button" class="btn btn-danger disabled" id="delete-permanently-button">
                    <i class="fa-solid fa-trash"></i> <span localize-content>DeletePermanently</span>
                </button>
                <button type="button" class="btn btn-secondary" id="import-button" data-bs-toggle="modal" data-bs-target="#import-modal">
                    <i class="fa-solid fa-file-import"></i> <span localize-content>Import</span>
                </button>
                <button type="button" class="btn btn-secondary" id="export-button" data-bs-toggle="modal" data-bs-target="#export-modal">
                    <i class="fa-solid fa-file-export"></i> <span localize-content>Export</span>
                </button>
                <button type="button" class="btn btn-outline-secondary" data-bs-toggle="collapse" data-bs-target="#filter-inputs" aria-expanded="true" aria-controls="filter-inputs">
                    <i class="fa-solid fa-filter"></i>
                </button>
                <a href="#" id="refresh-list"><i class="fa-solid fa-rotate"></i></a>
                <div class="d-flex align-items-center ms-2 pb-2">
                    <input class="form-check-input" type="checkbox" value="" id="is-delete">
                    <label class="form-check-label fs-5" for="is-delete" localize-content>IsDelete</label>
                </div>
            </div>
        </form>

        <div class="collapse" id="filter-inputs">
            <form id="@TableName.User-search-form" class="m-2">
                <div class="row g-2 mb-2">
                    <div class="col-3">
                        <label for="@UserModel.AttributeNames.UserCode" class="col-form-label col-md-6" localize-content>@UserModel.AttributeNames.UserCode</label>
                        <input type="text" class="form-control form-control-sm" asp-for="UserCode" />
                    </div>

                    <div class="col-3">
                        <label for="@UserModel.AttributeNames.OperatingStatus" class="col-form-label col-md-6" localize-content>@UserModel.AttributeNames.OperatingStatus</label>
                        <select class="form-select form-select-sm" asp-for="OperatingStatus">
                            <option value=""></option>
                            @foreach (var item in Enum.GetValues(typeof(Enums.OperatingStatus)))
                            {
                                <option value="@item" localize-content>@item</option>
                            }
                        </select>
                    </div>

                    <div class="col-3">
                        <label for="@Constants.DateCreate" class="col-form-label col-md-6" localize-content>@Constants.DateCreate</label>
                        <input type="date" class="form-control form-control-sm" asp-for="DateCreate" />
                    </div>

                    <div class="col-3">
                        <label for="@Constants.DateUpdate" class="col-form-label col-md-6" localize-content>@Constants.DateUpdate</label>
                        <input type="date" class="form-control form-control-sm" asp-for="DateUpdate" />
                    </div>
                </div>

                <div class="text-end">
                    <button type="button" class="btn btn-info" id="search-button">
                        <i class="fa-solid fa-magnifying-glass"></i> <span localize-content>Search</span>
                    </button>
                    <button type="button" class="btn btn-secondary" id="clear-button">
                        <i class="fa-solid fa-broom"></i> <span localize-content>Clear</span>
                    </button>
                </div>
            </form>
        </div>
    </section>

    <!--& TABLE -->
    <section class="table-wrapper card">
        <div class="table-wrapper-body row">
            <div class="table-wrapper-main" id="@TableName.User-table">
            </div>
        </div>
    </section>

    <!--& MODAL -->
    <section class="modal-wrapper">
        @await Html.PartialAsync(ScreenName.User.UserForm, Model)
        @await Component.InvokeAsync(Constants.Import, TableName.User)
        @await Component.InvokeAsync(Constants.Export, TableName.User)
    </section>
</div>

<script>
    let $userId;
    let $searchForm;

    $(function () {
        // Kích hoạt strict mode cho toàn bộ code bên trong hàm này
        'use strict';

        $searchForm = $("#@TableName.User-search-form");

        loadUsers($searchForm);

        $("#refresh-list").click(function(){
            loadUsers($searchForm);
        });

        $("#is-delete").change(function () {
            loadUsers($searchForm);
        });

        $(document).on("change", ".@TableName.User-checkbox", function () {
            // Gán giá trị cho biến Id để sử dụng với các hành động (sửa, xóa, v.v.)
            $userId = $(this).is(":checked") ? $(this).closest("tr").find('input[name="@UserModel.AttributeNames.UserId"]').val() : "";

            // Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
            const $length = $(".@TableName.User-checkbox:checked").length;
            checkLengthCheckbox($length, true, true, true, true, "@TableName.User-checkbox");
        });

        $("#create-button").click(function () {
            $("#only-save-button").css("display", "flex");
        });

        $("#edit-button").click(function () {
            $("#only-save-button").css("display", "none");

            callApi("@Url.Action(Constants.CreateOrEdit, TableName.User)/" + $userId, "GET")
                .then(data => {
                    // Khi trả ra json các field sẽ bị viết thường chữ cái đâu
                    $("#@TableName.User #@UserModel.AttributeNames.UserId").val(data.id);
                    $("#@TableName.User #@UserModel.AttributeNames.UserCode").val(data.userCode);
                    $("#@TableName.User #@UserModel.AttributeNames.Username").val(data.username);
                    $("#@TableName.User #@UserModel.AttributeNames.PhoneNumber").val(data.phoneNumber);
                    $("#@TableName.User #@UserModel.AttributeNames.GroupRole").val(data.groupRole);
                    $("#@TableName.User #@UserModel.AttributeNames.LastLoginDate").val(formatDateToInput(data.lastLoginDate));
                    $("#@TableName.User #@UserModel.AttributeNames.Note").val(data.note);
                    $("#@TableName.User #@UserModel.AttributeNames.OperatingStatus").val(data.operatingStatus).trigger("change");
                    $("#@TableName.User #@EmployeeModel.AttributeNames.EmployeeId").val(data.employeeId).trigger("change");
                })
                .catch(err => {
                    showMessage("@Localizer[Messages.ErrorCallAPI]");
                });
        });

        $("#delete-button").click(function () {
		    deleteUser("@Constants.Delete", $(this).closest("form"));
	    });

	    $("#delete-permanently-button").click(function () {
		    deleteUser("@Constants.DeletePermanently", $(this).closest("form"));
	    });

        $("#search-button").click(function () {
             loadUsers($searchForm);
        });

        $("#clear-button").click(function () {
             $searchForm.get(0).reset();

            loadUsers($searchForm);
        });
    });

    function deleteUser(actionName, $form) {
        // Lấy tất cả các Id của các checkbox đã chọn
        const $ids = $(".@TableName.User-checkbox:checked").map(function () {
            return $(this).closest("tr").find('input[name="@UserModel.AttributeNames.UserId"]').val();
        }).get().join(",");

        $form.find("#Ids").val($ids);

        // Tạo URL API bằng JavaScript lấy URL cơ bản của Controller (tùy chọn)
        const baseUrl = "@Url.Action("", TableName.User)";

        // Thay thế 'actionName' vào URL
        const apiUrl = baseUrl.endsWith('/') ? baseUrl + actionName : baseUrl + '/' + actionName;

        const $formData = new FormData($form[0]);

        callApi(apiUrl, "POST", $formData)
            .then(data => {
                loadUsers($searchForm);
            })
            .catch(err => {
                showMessage("@Localizer[Messages.ErrorCallAPI]");
            });
    }

    function loadUsers($form, pageIndex) {
        $(".loader").css("display", "flex");

        const $formData = new FormData($form.get(0));

        const filter = new FormData();
        filter.append("@Constants.PageIndex", pageIndex);

        const $isDelete = $("#is-delete").is(":checked");
        filter.append("@Constants.IsDelete", $isDelete);

        // Xóa các key không cần thiết (__Invariant)
        for (const [key, value] of $formData.entries()) {
            if (key !== "__Invariant") {
                filter.append(key, value);
            }
        }

        callApi("@Url.Action(Constants.GetList, TableName.User)", "POST", filter, "#@TableName.User-table")
            .then(data => {
                // Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
                checkLengthCheckbox(0, true, true, true, true, "@TableName.User-checkbox");

                // Load lại table thì gán lại "" để khi bám nút thêm không lỗi
                $userId = "";
            })
            .catch(err => {
                showMessage("@Localizer[Messages.ErrorCallAPI]");
            });
    }
</script>