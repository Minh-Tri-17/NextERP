@using NextERP.ModelBase
@using NextERP.Util
@model NextERP.ModelBase.SupplierOrderModel

@{
    ViewData["Title"] = TableName.SupplierOrder;
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Breadcrumbs = new List<(string Title, string Url, bool IsActive)>
{
        (TableName.SupplierOrder + "List", "", true),
    };
}

<div class="main-container">
    <div id="success-msg" class="position-fixed top-0 end-0 p-3 m-2 d-none" role="alert" aria-live="assertive" aria-atomic="true"></div>
    <input type="hidden" id="current-page-index" value="1" />

    <!--& FILTER -->
    <section class="filter-panel card">
        <form method="post">
            <div class="filter-actions">
                <input type="text" name="Ids" id="Ids" hidden />
                <button type="button" class="btn btn-danger disabled" id="delete-button" localize-content>
                    Delete
                </button>
                <button type="button" class="btn btn-danger disabled" id="delete-permanently-button" localize-content>
                    DeletePermanently
                </button>
                <button type="button" class="btn btn-secondary" id="import-button" data-bs-toggle="modal" data-bs-target="#import-modal" localize-content>
                    Import
                </button>
                <button type="button" class="btn btn-secondary" id="export-button" data-bs-toggle="modal" data-bs-target="#export-modal" localize-content>
                    Export
                </button>
                <button type="button" class="btn btn-outline-secondary" data-bs-toggle="collapse" data-bs-target=".filter-inputs" aria-expanded="true" aria-controls="filter-inputs">
                    <i class="fa-solid fa-filter"></i>
                </button>
                <a href="#" id="refresh-list"><i class="fa-solid fa-rotate"></i></a>
                <div class="d-flex align-items-center ms-2 pb-2">
                    <input class="form-check-input" type="checkbox" value="" id="is-delete">
                    <label class="form-check-label fs-5" for="is-delete" localize-content>IsDelete</label>
                </div>
            </div>
        </form>

        @* Truyền id nào thì sẽ hiện thị control filter đó nối nhau bởi dấu , và không có khoảng trắng *@
        @await Component.InvokeAsync(Constants.SearchBox, new { showClass = "#filter-name" })
    </section>

    <!--& TABLE -->
    <section class="table-wrapper card">
        <div class="table-wrapper-body col-12 row">
            <div class="table-wrapper-main col-7" id="@TableName.SupplierOrder-table">
            </div>

            <div class="col-1 d-flex justify-content-center">
                <div class="border-start border-2"></div>
            </div>

            <div class="table-wrapper-secondary col-4" id="@TableName.SupplierOrderDetail-table">
            </div>
        </div>
    </section>

    <!--& MODAL -->
    <section class="modal-wrapper">
        @await Component.InvokeAsync(Constants.Import, TableName.SupplierOrder)
        @await Component.InvokeAsync(Constants.Export, TableName.SupplierOrder)
    </section>
</div>

<script>
    let $supplierOrderId;

    $(document).ready(function () {
        loadSupplierOrders();
    });

    $("#refresh-list").click(function(){
        loadSupplierOrders();
        loadSupplierOrderDetails();
    });

    $("#is-delete").change(function () {
        loadSupplierOrders();
        loadSupplierOrderDetails();
    })

    $(document).on("change", ".@TableName.SupplierOrder-checkbox", function () {
        // Gán giá trị cho biến Id để sử dụng với các hành động (sửa, xóa, v.v.)
        $supplierOrderId = $(this).is(":checked") ? $(this).closest("tr").find('input[name="@AttributeNames.SupplierOrder.SupplierOrderId"]').val() : "";

        // Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
        const $length = $(".@TableName.SupplierOrder-checkbox:checked").length;
        checkLengthCheckbox($length, false, false, true, true, "@TableName.SupplierOrder-checkbox");
    });

    $("#@TableName.SupplierOrder-table").on("click", "tbody > tr", function () {
        $supplierOrderId = $(this).closest("tr").find('input[name="@AttributeNames.SupplierOrder.SupplierOrderId"]').val()
        loadSupplierOrderDetails();
    })

    $("#delete-button").click(function () {
        // Lấy tất cả các Id của các checkbox đã chọn
        const $ids = $(".@TableName.SupplierOrder-checkbox:checked").map(function () {
            return $(this).closest("tr").find('input[name="@AttributeNames.SupplierOrder.SupplierOrderId"]').val();
        }).get().join(",");

        $("#Ids").val($ids);

        const $form = $(this).closest("form");
        const formData = new FormData($form[0]);

        fetch("@Url.Action(Constants.Delete, TableName.SupplierOrder)", {
            method: "POST",
            body: formData
        }).then(response => {
            loadSupplierOrders();
            loadSupplierOrderDetails();

            return response.json();
        }).then(data => {
            // Gọi hàm affterCallAPISuccess để xứ lý sau khi call API success
            affterCallAPISuccess();

            // Load lại table thì gán lại "" để khi bám nút thêm không lỗi
            $supplierOrderId = "";

            showMessage(data);
        })
    });

    $("#delete-permanently-button").click(function () {
         // Lấy tất cả các Id của các checkbox đã chọn
         const $ids = $(".@TableName.SupplierOrder-checkbox:checked").map(function () {
             return $(this).closest("tr").find('input[name="@AttributeNames.SupplierOrder.SupplierOrderId"]').val();
         }).get().join(",");

         $("#Ids").val($ids);

         const $form = $(this).closest("form");
         const formData = new FormData($form[0]);

         fetch("@Url.Action(Constants.DeletePermanently, TableName.SupplierOrder)", {
             method: "POST",
             body: formData
         }).then(response => {
             loadSupplierOrders();
             loadSupplierOrderDetails();

             return response.json();
         }).then(data => {
             // Gọi hàm affterCallAPISuccess để xứ lý sau khi call API success
             affterCallAPISuccess();

             // Load lại table thì gán lại "" để khi bám nút thêm không lỗi
             $supplierOrderId = "";

             showMessage(data);
         })
    });

    $("#search-button").click(function () {
        loadSupplierOrders();
    })

    $("#clear-button").click(function () {
        $("#filter-name").val("");

        loadSupplierOrders();
    })

    function loadSupplierOrders(pageIndex) {
        // Khỏi tạo filter và gán giá trị
        const $keyWord = $("#filter-name").val();
        const $isDelete = $("#is-delete").is(":checked");
        
        let filter = new FormData();
        filter.append("@Constants.PageIndex", pageIndex);
        filter.append("@Constants.KeyWord", $keyWord);
        filter.append("@Constants.IsDelete", $isDelete);

        $(".loader").css("display", "flex");

        fetch("@Url.Action(Constants.GetList, TableName.SupplierOrder)", {
            method: "POST",
            body: filter
        }).then(response => {
            // Kiểm tra số lượng checkbox đã chọn và cập nhật trạng thái của các nút
            checkLengthCheckbox(0, false, false, true, true, "@TableName.SupplierOrder-checkbox");

            // Gọi hàm parseResponse để xử lý response trả về
            return parseResponse(response)
        }).then(result => {
            if (result.type === "html") {
                $("#@TableName.SupplierOrder-table").html(result.data);

                // Gọi hàm affterCallAPISuccess để xứ lý sau khi call API success
                affterCallAPISuccess();
            }
            else if (result.type === "json") {
                // Gọi hàm affterCallAPISuccess để xứ lý sau khi call API success
                affterCallAPISuccess();

                showMessage(result.data);
            }

            // Load lại table thì gán lại "" để khi bám nút thêm không lỗi
            $supplierOrderId = "";
        });
    }

    function loadSupplierOrderDetails(pageIndex) {
        // Khỏi tạo filter và gán giá trị
        let filter = new FormData();
        filter.append("@Constants.PageIndex", pageIndex);
        filter.append("@Constants.IdMain", $supplierOrderId);

        $(".loader").css("display", "flex");

        fetch("@Url.Action(Constants.GetList, TableName.SupplierOrderDetail)", {
            method: "POST",
            body: filter
        }).then(response => {
            // Gọi hàm parseResponse để xử lý response trả về
            return parseResponse(response)
        }).then(result => {
            if (result.type === "html") {
                $("#@TableName.SupplierOrderDetail-table").html(result.data);

                // Gọi hàm affterCallAPISuccess để xứ lý sau khi call API success
                affterCallAPISuccess();
            }
            else if (result.type === "json") {
                // Gọi hàm affterCallAPISuccess để xứ lý sau khi call API success
                affterCallAPISuccess();

                showMessage(result.data);
            }

            // Load lại table thì gán lại "" để khi bám nút thêm không lỗi
            $supplierOrderId = "";
        });
    }
</script>